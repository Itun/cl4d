/*
cl4d - object-oriented wrapper for the OpenCL C API v1.1
written in the D programming language

Copyright (C) 2009-2010 Andreas Hollandt

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module opencl.buffer;

import opencl.c.cl;
import opencl.context;
import opencl.error;
import opencl.wrapper;

//! buffer class
class CLBuffer : CLWrapper!(cl_mem, clGetMemObjectInfo)
{
private:

protected:
	//!
	this(cl_mem buffer)
	{
		super(buffer);
	}
	
public:
	/**
	 *	create a buffer object from hostbuf
	 *	TODO: hide cl_mem_flags?
	 *
	 *	Params:
	 *		context	=	is a valid OpenCL context used to create the buffer object
	 *		flags	=	is a bit-field that is used to specify allocation and usage information such as the memory
	 *					arena that should be used to allocate the buffer object and how it will be used
	 *		hostbuf	=	is a pointer to the buffer data that may already be allocated by the application
	 */
	this(CLContext context, cl_mem_flags flags, void[] hostbuf = null)
	{
		// TODO: debug to see what happens if hostbuf is really null and check against
		// perform argument checks? is it necessary or just leave it to OpenCL?

		cl_int res;
		super(clCreateBuffer(context.getObject(), flags, hostbuf.length, hostbuf.ptr, &res));
		
		mixin(exceptionHandling(
			["CL_INVALID_CONTEXT",				""],
			["CL_INVALID_BUFFER_SIZE",			"hostbuf is empty"],
			["CL_INVALID_HOST_PTR",				"hostbuf is null and CL_MEM_USE_HOST_PTR or CL_MEM_COPY_HOST_PTR are set in flags or hostbuf !is null but CL_MEM_COPY_HOST_PTR or CL_MEM_USE_HOST_PTR are not set in flags"],
			["CL_MEM_OBJECT_ALLOCATION_FAILURE",""],
			["CL_OUT_OF_RESOURCES",				""],
			["CL_OUT_OF_HOST_MEMORY",			""]
		));
	}

	/**
	 *	create a new buffer object representing a specific region in this buffer
	 *
	 *	Params:
	 *		flags	= a bit-field that is used to specify allocation and usage information about the image
	 *				  memory object being created and is described in table 5.3
	 *		origin	= defines the region's offset in this buffer
	 *		size	= defines the size in bytes
	 *	Returns:
	 */
	CLBuffer createRegionSubBuffer(cl_mem_flags flags, size_t origin, size_t size)
	{
		struct cl_buffer_region
		{
			size_t origin;
			size_t size;
		}
		cl_buffer_region reg = {origin, size};

		cl_int res;
		return new CLBuffer(clCreateSubBuffer(this.getObject(), flags, CL_BUFFER_CREATE_TYPE_REGION, &reg, &res));

		// TODO: handle flags separately? see CL_INVALID_VALUE message
		mixin(exceptionHandling(
			["CL_INVALID_VALUE",				"the region specified by (origin, size) is out of bounds in buffer OR buffer was created with CL_MEM_WRITE_ONLY and flags specifies CL_MEM_READ_WRITE or CL_MEM_READ_ONLY, OR if buffer was created with CL_MEM_READ_ONLY and flags specifies CL_MEM_READ_WRITE or CL_MEM_WRITE_ONLY, OR if flags specifies CL_MEM_USE_HOST_PTR or CL_MEM_ALLOC_HOST_PTR or CL_MEM_COPY_HOST_PTR"],
			["CL_INVALID_BUFFER_SIZE",			"size is 0"],
			["CL_INVALID_MEM_OBJECT",			"buffer is not a valid buffer object or is a sub-buffer object"],
			["CL_MISALIGNED_SUB_BUFFER_OFFSET",	"there are no devices in context associated with buffer for which the origin value is aligned to the CL_DEVICE_MEM_BASE_ADDR_ALIGN value"],
			["CL_MEM_OBJECT_ALLOCATION_FAILURE",""],
			["CL_OUT_OF_RESOURCES",				""],
			["CL_OUT_OF_HOST_MEMORY",			""],
		));
		
	}
}