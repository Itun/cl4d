/*
cl4d - object-oriented wrapper for the OpenCL C API v1.1
written in the D programming language

Copyright (C) 2009-2010 Andreas Hollandt

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module opencl.buffer;

import opencl.c.cl;
import opencl.context;
import opencl.error;
import opencl.wrapper;

//! buffer class
class CLBuffer : CLWrapper!(cl_mem, clGetMemObjectInfo)
{
private:

protected:
	//!
	this(cl_mem buffer)
	{
		super(buffer);
	}
	
public:
	/**
	 *	create a buffer object from hostbuf
	 *	TODO: hide cl_mem_flags?
	 *
	 *	Params:
	 *		context	=	is a valid OpenCL context used to create the buffer object
	 *		flags	=	is a bit-field that is used to specify allocation and usage information such as the memory
	 *					arena that should be used to allocate the buffer object and how it will be used
	 */
	this(CLContext context, void[] hostbuf, cl_mem_flags flags)
	{
		cl_int res;
		super(clCreateBuffer(context.getObject(), flags, hostbuf.length, hostbuf.ptr, &res));
		
		mixin(exceptionHandling(
			["CL_INVALID_CONTEXT",				""],
			["CL_INVALID_BUFFER_SIZE",			"hostbuf is empty"],
			["CL_INVALID_HOST_PTR",				"hostbuf is null and CL_MEM_USE_HOST_PTR or CL_MEM_COPY_HOST_PTR are set in flags or hostbuf !is null but CL_MEM_COPY_HOST_PTR or CL_MEM_USE_HOST_PTR are not set in flags"],
			["CL_MEM_OBJECT_ALLOCATION_FAILURE",""],
			["CL_OUT_OF_RESOURCES",				""],
			["CL_OUT_OF_HOST_MEMORY",			""]
		));
	}
}