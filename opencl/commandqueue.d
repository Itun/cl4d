/*
cl4d - object-oriented wrapper for the OpenCL C API v1.1
written in the D programming language

Copyright (C) 2009-2010 Andreas Hollandt

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module opencl.commandqueue;

import opencl.c.cl;
import opencl.context;
import opencl.device;
import opencl.wrapper;
import opencl.error;

class CLCommandQueue : CLWrapper!(cl_command_queue, clGetCommandQueueInfo)
{
protected:
	//! 
	this(cl_command_queue commandQueue)
	{
		super(commandQueue);
	}

public:
	//! creates a command-queue on a specific device
	// TODO: only pass a CLDevice?
	this(CLContext context, CLDevice device, bool outOfOrder, bool profiling)
	{
		cl_int res;
		super(clCreateCommandQueue(context.getObject(), device.getObject(), outOfOrder ? CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE : 0 | CL_QUEUE_PROFILING_ENABLE, &res));
		
		mixin(exceptionHandling(
			["CL_INVALID_CONTEXT",			"context is not a valid context"],
			["CL_INVALID_DEVICE",			"device is not a valid device or is not associated with context"],
			["CL_INVALID_VALUE",			"values specified in properties are not valid"],
			["CL_INVALID_QUEUE_PROPERTIES",	"values specified in properties are valid but are not supported by the device"],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	//! increments the command queue reference count
	void retain()
	{
		cl_int res;
		res = clRetainCommandQueue(_object);
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE","_object is not a valid command-queue"],
			["CL_OUT_OF_RESOURCES",		""],
			["CL_OUT_OF_HOST_MEMORY",	""]
		));
	}
	
	/**
	 *	decrements the command queue reference count
	 *	performs an implicit flush to issue any previously queued OpenCL commands in the command queue
	 */
	void release()
	{
		cl_int res;
		res = clReleaseCommandQueue(_object);
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE","_object is not a valid command-queue"],
			["CL_OUT_OF_RESOURCES",		""],
			["CL_OUT_OF_HOST_MEMORY",	""]
		));	
	}
	
	/**
	 *	issues all previously queued OpenCL commands to the device associated with command_queue.
	 *	flush only guarantees that all queued commands get issued to the appropriate device.
	 *	There is no guarantee that they will be complete after flush returns.
	 *
	 *	Any blocking commands queued in a command-queue and clReleaseCommandQueue perform
	 *	an implicit flush of the command-queue.
	 *
	 *	To use event objects that refer to commands enqueued in a command-queue as event objects to
	 *	wait on by commands enqueued in a different command-queue, the application must call a
	 *	flush or any blocking commands that perform an implicit flush of the command-queue where
	 *	the commands that refer to these event objects are enqueued.
	 */
	void flush()
	{
		cl_int res = clFlush(getObject());
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",	""],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	/**
	 *	blocks until all previously queued OpenCL commands in command_queue are issued to the
	 *	associated device and have completed. clFinish does not return until all queued commands in
	 *	command_queue have been processed and completed. clFinish is also a synchronization point.
	 */
	void finish()
	{
		cl_int res = clFinish(getObject());
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",	""],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	//! are the commands queued in the command queue executed out-of-order
	@property bool outOfOrder()
	{
		return cast(bool) (getInfo!(cl_command_queue_properties)(CL_QUEUE_PROPERTIES) & CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE);
	}
	
	//! is profiling of commands in the command-queue enabled
	@property bool profiling()
	{
		return cast(bool) (getInfo!(cl_command_queue_properties)(CL_QUEUE_PROPERTIES) & CL_QUEUE_PROFILING_ENABLE);
	}
}