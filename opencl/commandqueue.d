/*
cl4d - object-oriented wrapper for the OpenCL C API v1.1
written in the D programming language

Copyright (C) 2009-2010 Andreas Hollandt

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module opencl.commandqueue;

import opencl.c.cl;
import opencl.buffer;
import opencl.context;
import opencl.device;
import opencl.error;
import opencl.event;
import opencl.wrapper;

class CLCommandQueue : CLWrapper!(cl_command_queue, clGetCommandQueueInfo)
{
protected:
	//! 
	this(cl_command_queue commandQueue)
	{
		super(commandQueue);
	}

public:
	//! creates a command-queue on a specific device
	// TODO: only pass a CLDevice?
	this(CLContext context, CLDevice device, bool outOfOrder, bool profiling)
	{
		cl_int res;
		_object = clCreateCommandQueue(context.getObject(), device.getObject(), outOfOrder ? CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE : 0 | CL_QUEUE_PROFILING_ENABLE, &res);
		
		mixin(exceptionHandling(
			["CL_INVALID_CONTEXT",			"context is not a valid context"],
			["CL_INVALID_DEVICE",			"device is not a valid device or is not associated with context"],
			["CL_INVALID_VALUE",			"values specified in properties are not valid"],
			["CL_INVALID_QUEUE_PROPERTIES",	"values specified in properties are valid but are not supported by the device"],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	/**
	 *	issues all previously queued OpenCL commands to the device associated with command_queue.
	 *	flush only guarantees that all queued commands get issued to the appropriate device.
	 *	There is no guarantee that they will be complete after flush returns.
	 *
	 *	Any blocking commands queued in a command-queue and clReleaseCommandQueue perform
	 *	an implicit flush of the command-queue.
	 *
	 *	To use event objects that refer to commands enqueued in a command-queue as event objects to
	 *	wait on by commands enqueued in a different command-queue, the application must call a
	 *	flush or any blocking commands that perform an implicit flush of the command-queue where
	 *	the commands that refer to these event objects are enqueued.
	 */
	void flush()
	{
		cl_int res = clFlush(getObject());
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",	""],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	/**
	 *	blocks until all previously queued OpenCL commands in command_queue are issued to the
	 *	associated device and have completed. clFinish does not return until all queued commands in
	 *	command_queue have been processed and completed. clFinish is also a synchronization point.
	 */
	void finish()
	{
		cl_int res = clFinish(getObject());
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",	""],
			["CL_OUT_OF_RESOURCES",			""],
			["CL_OUT_OF_HOST_MEMORY",		""]
		));
	}
	
	/**
	 *	enqueue commands to read from a buffer object to host memory or write to a buffer object from host memory
	 *
	 *	the command queue and the buffer must be created with the same OpenCL context
	 *
	 *	Params:
	 *		blocking	=	if false, queues a non-blocking read/write command and returns. The contents of the buffer that ptr points to
	 *								cannot be used until the command has completed. The function returns an event
	 *								object which can be used to query the execution status of the read command. When the read
	 *								command has completed, the contents of the buffer that ptr points to can be used by the application
	 *		offset		=	is the offset in bytes in the buffer object to read from or write to
	 *		size		=	is the size in bytes of data being read or written
	 *		ptr			=	is the pointer to buffer in host memory where data is to be read into or to be written from
	 *		waitlist	=	specifies events that need to complete before this particular command can be executed
	 *						they act as synchronization points. The context associated with events in waitlist and the queue must be the same
	 *
	 *	Returns:
	 *		an event object that identifies this particular read / write command and can be used to query or queue a wait for this particular command to complete
	 */
	private CLEvent enqueueReadWriteBuffer(alias func, PtrType)(CLBuffer buffer, cl_bool blocking, size_t offset, size_t size, PtrType ptr, CLEvents waitlist)
	in
	{
		assert(ptr !is null);
	}
	body
	{
		cl_event event;
		cl_int res = func (_object, buffer.getObject(), blocking, offset, size, ptr, waitlist.length, waitlist.ptr, &event);
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",						""],
			["CL_INVALID_CONTEXT",								"context associated with command queue and buffer or waitlist is not the same"],
			["CL_INVALID_MEM_OBJECT",							"buffer is invalid"],
			["CL_INVALID_VALUE",								"region being read/written specified by (offset, size) is out of bounds"],
			["CL_INVALID_EVENT_WAIT_LIST",						"event objects in waitlist are not valid events"],
			["CL_MISALIGNED_SUB_BUFFER_OFFSET",					"buffer is a sub-buffer object and offset specified when the sub-buffer object is created is not aligned to CL_DEVICE_MEM_BASE_ADDR_ALIGN value for device associated with queue"],
			["CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST",	"the read operations are blocking and the execution status of any of the events in waitlist is a negative integer value"],
			["CL_MEM_OBJECT_ALLOCATION_FAILURE",				"couldn't allocate memory for data store associated with buffer"],
			["CL_OUT_OF_RESOURCES",								""],
			["CL_OUT_OF_HOST_MEMORY",							""]
		));

		return CLEvent(event);
	}
	alias enqueueReadWriteBuffer!(clEnqueueReadBuffer, void*) enqueueReadBuffer; //! ditto
	alias enqueueReadWriteBuffer!(clEnqueueWriteBuffer, const void*) enqueueWriteBuffer; //! ditto
	
	/**
	 *	enqueue commands to read a 2D or 3D rectangular region from a buffer object to host memory or write a 2D or 3D rectangular region to a buffer object from host memory
	 *
	 *	Also see enqueueReadWriteBuffer and OpenCL specs NOTE
	 *
	 *	Params:
	 *	    bufferOrigin	=	defines the (x, y, z) offset in the memory region associated with buffer. For a 2D rectangle region, the z value given by buffer_origin[2] should be 0. The offset in bytes is
	 *							computed as buffer_origin[2] * buffer_slice_pitch + buffer_origin[1] * buffer_row_pitch + buffer_origin[0]
	 *	    hostOrigin		=	the (x, y, z) offset in the memory region pointed to by ptr. For a 2D rectangle region, the z value given by host_origin[2] should be 0. The offset in bytes is computed as
	 *							host_origin[2] * host_slice_pitch + host_origin[1] * host_row_pitch + host_origin[0].
	 *	    region			=	the (width, height, depth) in bytes of the 2D or 3D rectangle being read or written. For a 2D rectangle copy, the depth value given by region[2] should be 1
	 *	    bufferRowPitch	=	the length of each row in bytes to be used for the memory region associated with buffer. If buffer_row_pitch is 0, buffer_row_pitch is computed as region[0]
	 *	    bufferSlicePitch=	the length of each 2D slice in bytes to be used for the memory region associated with buffer. If buffer_slice_pitch is 0, buffer_slice_pitch is computed as region[1] * buffer_row_pitch
	 *	    hostRowPitch	=	the length of each row in bytes to be used for the memory region pointed to by ptr. If host_row_pitch is 0, host_row_pitch is computed as region[0]
	 *	    hostSlicePitch	=	the length of each 2D slice in bytes to be used for the memory region pointed to by ptr. If host_slice_pitch is 0, host_slice_pitch is computed as region[1] * host_row_pitch
	 *	    ptr				=	pointer to buffer in host memory where data is to be read into or to be written from
	 *
	 *	TODO: add assertions that buffer origin etc. is correct in respect to CLBuffer isImage2D etc. see above notes
	 */
	private void enqueueReadWriteBufferRect(alias func, PtrType)(CLBuffer buffer, cl_bool blocking, const size_t[3] bufferOrigin, const size_t[3] hostOrigin, const size_t[3] region,
	                                                             PtrType ptr, CLEvents waitlist = null, size_t bufferRowPitch = 0, size_t bufferSlicePitch = 0, size_t hostRowPitch = 0, size_t hostSlicePitch = 0)
	in
	{
		assert(ptr !is null);
		assert(region[] != 0);
	}
	body
	{
		// TODO: leave the default pitch values as 0 and let OpenCL compute or set default values as region[0], etc. see method documentation
		cl_event event;
		cl_int res = func(_object, buf.getObject(), blocking, bufferOrigin, hostOrigin, region, bufferRowPitch, bufferSlicePitch, hostRowPitch, hostSlicePitch, ptr, waitlist.length, waitlist.ptr, &event);
		
		mixin(exceptionHandling(
			["CL_INVALID_COMMAND_QUEUE",						""],
			["CL_INVALID_CONTEXT",								"context associated with command queue and buffer or waitlist is not the same"],
			["CL_INVALID_MEM_OBJECT",							"buffer is invalid"],
			["CL_INVALID_VALUE",								"region being read/written specified by (bufferOrigin, region) is out of bounds or pitch values are invalid"],
			["CL_INVALID_EVENT_WAIT_LIST",						"event objects in waitlist are not valid events"],
			["CL_MISALIGNED_SUB_BUFFER_OFFSET",					"buffer is a sub-buffer object and offset specified when the sub-buffer object is created is not aligned to CL_DEVICE_MEM_BASE_ADDR_ALIGN value for device associated with queue"],
			["CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST",	"the read operations are blocking and the execution status of any of the events in waitlist is a negative integer value"],
			["CL_MEM_OBJECT_ALLOCATION_FAILURE",				"couldn't allocate memory for data store associated with buffer"],
			["CL_OUT_OF_RESOURCES",								""],
			["CL_OUT_OF_HOST_MEMORY",							""]
		));

			return CLEvent(event);

	}
	alias enqueueReadWriteBufferRect!(clEnqueueReadBufferRect, void*) enqueueReadBufferRect; //! ditto
	alias enqueueReadWriteBufferRect!(clEnqueueWriteBufferRect, const void*) enqueueWriteBufferRect; //! ditto
	
	//! are the commands queued in the command queue executed out-of-order
	@property bool outOfOrder()
	{
		return cast(bool) (getInfo!(cl_command_queue_properties)(CL_QUEUE_PROPERTIES) & CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE);
	}
	
	//! is profiling of commands in the command-queue enabled
	@property bool profiling()
	{
		return cast(bool) (getInfo!(cl_command_queue_properties)(CL_QUEUE_PROPERTIES) & CL_QUEUE_PROFILING_ENABLE);
	}
}