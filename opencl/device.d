/*
cl4d - object-oriented wrapper for the OpenCL C API v1.0 revision 48
written in the D programming language

Copyright (C) 2009-2010 Andreas Hollandt

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module opencl.device;

import opencl.c.cl;
import opencl.platform;
import opencl.wrapper;

/// collection of several devices
alias CLObjectCollection!(cl_device_id) CLDevices;

/// device class
class CLDevice : CLWrapper!(cl_device_id, clGetDeviceInfo)
{
private:
	CLPlatform _platform;

public:
	/// need a constructor without platform, if we need to wrap a retrieved cl_device_id
	this(cl_device_id device)
	{
		super(device);
		// TODO: retrieve platform ID via CL call and set _platform
	}
	
	///
	this(CLPlatform platform, cl_device_id device)
	{
		super(device);
		_platform = platform;
	}
	
	/// get the associated platform
	CLPlatform platform() {return _platform;} // TODO: maybe check with GetDeviceInfo if IDs match
	
	/// get device name
	string name() {return getStringInfo(CL_DEVICE_NAME);}
	
	/// get device vendor
	string vendor() {return getStringInfo(CL_DEVICE_VENDOR);}
	
	/// get device OpenCL driver version in the form major_number.minor_number
	string driverVersion() {return getStringInfo(CL_DRIVER_VERSION);}
	
	/**
	 * get OpenCL profile string
	 * 
	 * Returns the profile name supported by the device. 
	 * The profile name returned can be one of the following strings:
	 *		FULL_PROFILE - if the device supports the OpenCL specification
	 *		(functionality defined as part of the core specification and does not require 
	 *		any extensions to be supported). 
	 * 
	 *		EMBEDDED_PROFILE - if the device supports the OpenCL embedded profile.
	 */
	string profile() {return getStringInfo(CL_DEVICE_PROFILE);}
	
	/**
	 * get OpenCL version string
	 * 
	 * Returns:
	 *		OpenCL version supported by the device.
	 *		This version string has the following format: 
 	 *		OpenCL<space><major_version.minor_version><space><vendor-specific information>
	 */
	string clVersion() {return getStringInfo(CL_DEVICE_VERSION);}
	
	/**
	 * get extensions supported by the device
	 * 
	 * Returns:
	 *		Returns a space separated list of extension names
	 *		(the extension names themselves do not contain any spaces).  
	 */
	string extensions() {return getStringInfo(CL_DEVICE_EXTENSIONS);}
	
	
}